//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MovementP1"",
            ""id"": ""90ab26e9-6d6f-42c8-8e1e-03d53fe95923"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fbad1ab7-1171-42b0-ac8f-763deb35438a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e77ce7da-906b-45a3-b3f5-33ffd352a715"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""753265cc-7360-4809-8b59-a268d4df2292"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fb60df8a-ab23-4c79-beee-454ec5daf7d0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9240a594-b69c-44db-a1bf-a5c2367915fa"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""27e2ac49-bad2-4b36-a2ab-431ea7b66752"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""57d92284-ff39-43f3-9457-9372274c7ee0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""915cf57c-e680-4323-8dfb-c6974fd8e635"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementP2"",
            ""id"": ""2922796e-26cb-4034-8067-b0aa43685806"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""326bf9f5-05cc-4496-a95f-76858af342e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6577e881-c2c4-49ed-b47c-25190ceed0f4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8436713-f65e-4e97-a4e0-3d3f340c677d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c2c6baa-3707-4aa0-b132-8263bc1badf2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""21dc0124-f54d-4d01-83df-9c03e8eecd62"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c0eee0bd-2768-494c-9bb6-bc772ff8fddb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MovementP1
        m_MovementP1 = asset.FindActionMap("MovementP1", throwIfNotFound: true);
        m_MovementP1_Move = m_MovementP1.FindAction("Move", throwIfNotFound: true);
        m_MovementP1_Jump = m_MovementP1.FindAction("Jump", throwIfNotFound: true);
        // MovementP2
        m_MovementP2 = asset.FindActionMap("MovementP2", throwIfNotFound: true);
        m_MovementP2_Move = m_MovementP2.FindAction("Move", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_MovementP1.enabled, "This will cause a leak and performance issues, PlayerControls.MovementP1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MovementP2.enabled, "This will cause a leak and performance issues, PlayerControls.MovementP2.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementP1
    private readonly InputActionMap m_MovementP1;
    private List<IMovementP1Actions> m_MovementP1ActionsCallbackInterfaces = new List<IMovementP1Actions>();
    private readonly InputAction m_MovementP1_Move;
    private readonly InputAction m_MovementP1_Jump;
    public struct MovementP1Actions
    {
        private @PlayerControls m_Wrapper;
        public MovementP1Actions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementP1_Move;
        public InputAction @Jump => m_Wrapper.m_MovementP1_Jump;
        public InputActionMap Get() { return m_Wrapper.m_MovementP1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementP1Actions set) { return set.Get(); }
        public void AddCallbacks(IMovementP1Actions instance)
        {
            if (instance == null || m_Wrapper.m_MovementP1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementP1ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementP1Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementP1Actions instance)
        {
            if (m_Wrapper.m_MovementP1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementP1Actions instance)
        {
            foreach (var item in m_Wrapper.m_MovementP1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementP1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementP1Actions @MovementP1 => new MovementP1Actions(this);

    // MovementP2
    private readonly InputActionMap m_MovementP2;
    private List<IMovementP2Actions> m_MovementP2ActionsCallbackInterfaces = new List<IMovementP2Actions>();
    private readonly InputAction m_MovementP2_Move;
    public struct MovementP2Actions
    {
        private @PlayerControls m_Wrapper;
        public MovementP2Actions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementP2_Move;
        public InputActionMap Get() { return m_Wrapper.m_MovementP2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementP2Actions set) { return set.Get(); }
        public void AddCallbacks(IMovementP2Actions instance)
        {
            if (instance == null || m_Wrapper.m_MovementP2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementP2ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementP2Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementP2Actions instance)
        {
            if (m_Wrapper.m_MovementP2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementP2Actions instance)
        {
            foreach (var item in m_Wrapper.m_MovementP2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementP2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementP2Actions @MovementP2 => new MovementP2Actions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMovementP1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IMovementP2Actions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
